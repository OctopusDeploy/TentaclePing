# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build TentaclePing

on:
  pull_request:
    branches: [ "main" ]
  workflow_call:  # This makes the workflow reusable

jobs:
  build:
    strategy:
        matrix:
            os: [ubuntu-latest, windows-latest, ubuntu-24.04-arm]
            include:
                - os: ubuntu-latest
                  runtime: linux-x64
                  framework: net8.0
                - os: windows-latest
                  runtime: win-x64
                  framework: net8.0-windows
                - os: ubuntu-24.04-arm
                  runtime: linux-arm64
                  framework: net8.0
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore source/

    - name: Get version info
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # For tagged releases, use the tag without 'v' prefix
          VERSION="${{ github.ref_name }}"
          VERSION_NUMBER="${VERSION#v}"
        else
          # For PR builds, read VersionPrefix from project file and append dev suffix
          VERSION_PREFIX=$(grep -oP '<VersionPrefix>\K[^<]+' source/TentaclePing/TentaclePing.csproj || grep -oP '<VersionPrefix>\K[^<]+' source/TentaclePong/TentaclePong.csproj || echo "1.0.0")
          VERSION_NUMBER="${VERSION_PREFIX}-dev.${{ github.run_number }}"
        fi
        echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION_NUMBER"

    - name: Build
      run: dotnet build source/ --no-restore -c Release -p:Version=${{ steps.version.outputs.version }} -p:AssemblyVersion=${{ steps.version.outputs.version }} -p:FileVersion=${{ steps.version.outputs.version }}

    - name: Publish Self-Contained
      run: |
        dotnet publish source/ -c Release -r ${{ matrix.runtime }} --self-contained true -f ${{ matrix.framework }} -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishSingleFile=true -p:DebugType=embedded -p:PublishReadyToRun=false -p:Version=${{ steps.version.outputs.version }} -p:AssemblyVersion=${{ steps.version.outputs.version }} -p:FileVersion=${{ steps.version.outputs.version }}

        
    - name: Create Archives (Linux)
      if: runner.os != 'Windows'
      run: |
        # Create temp directory for combined archive
        mkdir -p dists
        cp ./source/TentaclePing/bin/Release/${{ matrix.framework }}/${{ matrix.runtime }}/publish/TentaclePing dists/
        cp ./source/TentaclePong/bin/Release/${{ matrix.framework }}/${{ matrix.runtime }}/publish/TentaclePong dists/
        tar -czf TentaclePing-${{ matrix.runtime }}.tar.gz -C dists .
        rm -rf dists

    - name: Create Archives (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create temp directory for combined archive
        New-Item -ItemType Directory -Path dists -Force
        Copy-Item ./source/TentaclePing/bin/Release/${{ matrix.framework }}/${{ matrix.runtime }}/publish/TentaclePing.exe dists/
        Copy-Item ./source/TentaclePong/bin/Release/${{ matrix.framework }}/${{ matrix.runtime }}/publish/TentaclePong.exe dists/
        Compress-Archive -Path dists/* -DestinationPath TentaclePing-${{ matrix.runtime }}.zip
        Remove-Item -Recurse -Force dists

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TentaclePing-${{ matrix.runtime }}
        compression-level: 0
        path: |
          TentaclePing-${{ matrix.runtime }}.tar.gz
          TentaclePing-${{ matrix.runtime }}.zip

